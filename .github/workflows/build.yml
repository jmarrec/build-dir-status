name: C++ CI

on:
  push:
    branches: [ main, mac ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          PLATFORM_NAME: Linux
          BINARY_EXT: run
        - os: macos-latest
          PLATFORM_NAME: Darwin
          BINARY_EXT: dmg

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install conan
      run: |
          python --version
          pip install conan gcovr
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8
          conan user

    - name: Setup QtIFW 4.x
      uses: jmarrec/setup-qtifw@v1
      with:
        qtifw-version: '4.x'

    - name: Install deps
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "Using apt to install ninja"
          sudo apt update
          sudo apt -y -qq install ninja-build
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "Using brew to install ninja"
          brew install ninja
          echo "Setting MACOSX_DEPLOYMENT_TARGET to 10.15"
          echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          echo "Adding SDKROOT to GITHUB_ENV"
          echo "SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Window" ]; then
          choco install ninja
          # C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
          MSVC_DIR=$(cmd.exe /c "vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath -latest")
          echo "Latest is: $MSVC_DIR"
          echo "MSVC_DIR=$MSVC_DIR" >> $GITHUB_ENV
          # add folder containing vcvarsall.bat
          echo "$MSVC_DIR\VC\Auxiliary\Build" >> $GITHUB_PATH
        fi;

        mkdir build

    - name: CMake configure (Unix)
      if: runner.os != 'Windows'
      working-directory: ./build
      shell: bash
      run: |
        set -x
        cmake -G Ninja -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DENABLE_COVERAGE:BOOL=ON -DCPACK_BINARY_IFW:BOOL=ON -DUSE_LIBXSLT:BOOL=ON ../

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      working-directory: ./build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      # NOTE: If you re-enable 'Download the OpenStudio installer' step, then pass `openstudio_DIR=$openstudio_DIR cmake [etc]`
      run: |
        echo "Using vcvarsall to initialize the development environment"
        call vcvarsall.bat x64
        cmake -G Ninja -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DENABLE_COVERAGE:BOOL=ON -DCPACK_BINARY_IFW:BOOL=ON -DUSE_LIBXSLT:BOOL=ON ../

    - name: Build
      working-directory: ./build
      shell: bash
      run: |
        set -x
        ninja

    - name: Produce coverage report
      working-directory: ./build
      shell: bash
      run: |
        set -x
        ctest -j 2 --verbose
        gcovr -j 2 --delete --root ../ --exclude '.*GTest.cpp' --print-summary --xml-pretty --xml coverage.xml .

    - name: Publish to codecov
      uses: codecov/codecov-action@v2
      with:
        flags: ${{ runner.os }}
        name: ${{ runner.os }}-coverage
        files: ./build/coverage.xml

    - name: Build package
      working-directory: ./build
      shell: bash
      run: |
        set -x
        ninja package

    - name: Upload Binary installer to release
      if: contains(github.ref, 'refs/tags')
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/_CPack_Packages/${{ matrix.PLATFORM_NAME }}/IFW/*.${{ matrix.BINARY_EXT }}
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

